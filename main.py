# –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–≤–æ–¥–∞ - –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É

from telebot import TeleBot
from telebot import types
from io import StringIO
from datetime import datetime
import requests

import config
import help_message

bot = TeleBot(config.TOKEN)


# –•—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
user_data = {}
result_message = ''


def ask_for_value(message, chat_id, field, question, next_handler):

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π.
    # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ, –±–æ—Ç –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å.

    try:
        value = float(message.text)
        user_data[chat_id][field] = value

        if next_handler:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.send_message(chat_id, question)
            bot.register_next_step_handler(message, next_handler)
        else:
            finalize_results(chat_id)  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    except ValueError:
        bot.send_message(chat_id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler(
            message, lambda msg: ask_for_value(msg, chat_id, field, question, next_handler)
        )


@bot.message_handler(commands=["start"])
def start_handler(message):
    chat_id = message.chat.id
    user_data[chat_id] = {}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≤—Ö–æ–¥—è—â—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö:")
    bot.register_next_step_handler(
        message,
        lambda msg: ask_for_value(
            msg,
            chat_id,
            "rub_amount",
            "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å RUB > EUR –≤ –¶–∏—Ñ—Ä–∞–ë–∞–Ω–∫–µ:",
            handle_rub_to_eur,
        ),
    )


def handle_rub_to_eur(message):
    chat_id = message.chat.id
    ask_for_value(
        message,
        chat_id,
        "rub_to_eur",
        "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å RUB > USDT –Ω–∞ Bybit:",
        handle_rub_to_usdt,
    )


def handle_rub_to_usdt(message):
    chat_id = message.chat.id
    ask_for_value(
        message,
        chat_id,
        "rub_to_usdt",
        "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å USDT > KZT –Ω–∞ Bybit:",
        handle_usdt_to_kzt,
    )


def handle_usdt_to_kzt(message):
    chat_id = message.chat.id
    ask_for_value(
        message,
        chat_id,
        "usdt_to_kzt",
        "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å KZT > EUR –≤ FF Bank:",
        handle_kzt_to_eur,
    )


def handle_kzt_to_eur(message):
    chat_id = message.chat.id
    ask_for_value(
        message,
        chat_id,
        "kzt_to_eur",
        "–í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å –º–µ–Ω—è–ª—ã:",
        handle_exchange_rate,
    )


def handle_exchange_rate(message):
    chat_id = message.chat.id
    ask_for_value(
        message,
        chat_id,
        "exchanger_rate",
        "",  # –ü—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        None,
    )


def finalize_results(chat_id):
    global result_message
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    rub_amount = user_data[chat_id]["rub_amount"]
    rub_to_eur = user_data[chat_id]["rub_to_eur"]
    rub_to_usdt = user_data[chat_id]["rub_to_usdt"]
    usdt_to_kzt = user_data[chat_id]["usdt_to_kzt"]
    kzt_to_eur = user_data[chat_id]["kzt_to_eur"]
    exchanger_rate = user_data[chat_id]["exchanger_rate"]

    exit_eur_cifra = round((rub_amount-rub_amount*0.009)/rub_to_eur, 2)
    real_exchanger_rate_cifra = round(rub_amount/exit_eur_cifra, 2)   #ZeroDivisionError: float division by zero

    exit_cash_cifra = round(((rub_amount-rub_amount*0.009)/rub_to_eur)-(((rub_amount-rub_amount*0.009)/rub_to_eur)*0.02+3+5), 2)
    real_exchanger_rate_cifra_cash = round(rub_amount/exit_cash_cifra, 2)

    exit_eur_crypt = round(rub_amount/rub_to_usdt*usdt_to_kzt/kzt_to_eur, 2)
    real_exchanger_rate_eur_cript = round(rub_amount/exit_eur_crypt)

    exit_cash_crypt = round((rub_amount/rub_to_usdt*usdt_to_kzt/kzt_to_eur)-((rub_amount/rub_to_usdt*usdt_to_kzt/kzt_to_eur)*0.02+3+5), 2)
    real_exchanger_rate_crypt_cash = round(rub_amount/exit_cash_crypt, 2)

    exit_man = round(rub_amount/exchanger_rate, 2)




    # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    result_message = (
        f"üìÖ –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {current_date}\n\n"
        f"üíµ –í—Ö–æ–¥—è—â–∞—è —Å—É–º–º–∞: {rub_amount} RUB\n"
        f"1. –ö—É—Ä—Å RUB > EUR (–¶–∏—Ñ—Ä–∞–ë–∞–Ω–∫): {rub_to_eur}\n"
        f"2. –ö—É—Ä—Å RUB > USDT (Bybit): {rub_to_usdt}\n"
        f"3. –ö—É—Ä—Å USDT > KZT (Bybit): {usdt_to_kzt}\n"
        f"4. –ö—É—Ä—Å KZT > EUR (FF Bank): {kzt_to_eur}\n"
        f"5. –ö—É—Ä—Å –º–µ–Ω—è–ª—ã: {exchanger_rate}\n\n"
        f"""–í—ã—Ö–æ–¥ –≤ –µ–≤—Ä–æ –¶–∏—Ñ—Ä–∞: {exit_eur_cifra}
–ö—É—Ä—Å –¶–∏—Ñ—Ä–∞: {real_exchanger_rate_cifra}

–í—ã—Ö–æ–¥ –≤ –µ–≤—Ä–æ –Ω–∞–ª–∏—á–Ω—ã–µ —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä—É: {exit_cash_cifra}
–ö—É—Ä—Å –Ω–∞–ª–∏—á–Ω—ã—Ö —á–µ—Ä–µ–∑ —Ü–∏—Ñ—Ä—É: {real_exchanger_rate_cifra_cash}
        
–í—ã—Ö–æ–¥ –µ–≤—Ä–æ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É: {exit_eur_crypt}
–ö—É—Ä—Å –ö—Ä–∏–ø—Ç–∞: {real_exchanger_rate_eur_cript}
        
–í—ã—Ö–æ–¥ –≤ –µ–≤—Ä–æ –Ω–∞–ª–∏—á–Ω—ã–µ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É: {exit_cash_crypt}
–ö—É—Ä—Å –Ω–∞–ª–∏—á–Ω—ã—Ö —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç—É: {real_exchanger_rate_crypt_cash}
        
–í—ã—Ö–æ–¥ –≤ –µ–≤—Ä–æ –º–µ–Ω—è–ª–∞: {exit_man}
–ö—É—Ä—Å –º–µ–Ω—è–ª–∞: {exchanger_rate}
        """
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    bot.send_message(
        chat_id = chat_id,
        text=result_message
    )

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    bot.send_message(
        chat_id= chat_id,
        text="""–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.
        \n
–í–≤–µ–¥–∏—Ç–µ /fix —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º —á–∞—Ç–µ
        """
    )


@bot.message_handler(commands=['fix'])
def fix(message: types.Message):
    bot.send_message(
        chat_id=-4696327476,
        text=result_message
    )
    bot.send_message(
        chat_id=message.chat.id,
        text='–†–µ–∑—É–ª—å—Ç–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –≤ —á–∞—Ç–µ\n–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.'
    )

#  –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—É—Ä—Å EUR –∫ RUB –ø–æ API
@bot.message_handler(commands=['api'])
def get_eur_to_rub_ratio(message: types.Message):
    from_currency = 'eur'
    to_currency = 'rub'
    response = requests.get(config.API_EXCHANGE_RATE)
    if response.status_code != 200:
        ratio_result = -1
    json_data = response.json()
    ratio_result = json_data[from_currency][to_currency]
    bot.send_message(
        chat_id=message.chat.id,
        text=f'–ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å –µ–≤—Ä–æ: {ratio_result}'
    )



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)